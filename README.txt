==================================READ ME============================================================================
I. Задание
II. Описание классов программы
III. Описание методов моей коллекции

=I. Задание==========================================================================================================
Необходимо реализовать коллекцию, которая имеет фиксированный размер.

Размер задаётся:

    по умолчанию 16
    по указанию пользователя.

Размер коллекции после инициализации меняться не может.

Каждый новый элемент добавляется в конец. После того, как количество элементов достигло максимума -
при добавлении нового элемента коллекция "сдвигается" влево.

1-й элемент удаляется, а каждый следующий смещается на один элемент влево.

Результатом выполнения задания должен быть репозиторий с коллекцией, классом, тестирующим данную коллекцию,
описанием задания и README файлом с инструкцией по запуску приложения

=II. Описание классов программы======================================================================================
Программа содержит три класса:
- AppRuner
- MyQueueDemo
- MyQueue

Класс AppRuner содержит метод main() который является точкой входа в программу. В этом классе создается экземпляр класса
MyQueueDemo и запускается метод startDemo() даного экземляра класса.

Класс MyQueueDemo создает два экземляпа класса MyDemo: один со стандартным размером, другой с пользовательским.
Метод startDemo() заполняет обе созданные коллекции, выводит их содержимое на экран, добавляет еще один элемент и снова
выводит коллекции на экран, чтобы показать, что коллекция сместилась влево.

Класс MyQueue описывает структуру коллекции и методы, которые ее обрабатывают. Элементы колекции сохраняются в массиве
Object[] coll. Также у класса коллекции есть свойство size, счетчик заполненных элементов n и константа для хранения
рамзера по умолчанию MAX_SIZE = 16. У класса два конструктора: без указания размера создается коллекция с размером по
умолчанию, с указанием коллекции - создает коллекцию с заданным размером.

=III. Описание методов моей коллекции=================================================================================
MyQueue имплементирует интерфейс Queue. Методы класса MyQueue:

public int size() - возвращает размер коллекции

public boolean isEmpty() - проверяет коллекцию на заполненность, сверяя счетчик n с нулем.

public boolean contains(Object o) - проверяет есть ли в коллекции объект о.

public Iterator iterator() - возвращает экземпляр класса MyIterator.

public Object[] toArray() - возвращает массив coll.

public Object[] toArray(Object[] a) - возвращает массив a заданного типа с приведенными к нему элементами коллекции.

public boolean add(Object o) - вызывает метод checkSize(), добавляет элемент в последнюю ячейку массива.

public boolean remove(Object o) - удаляет объект о из коллекции и смещает элементы к началу.

public boolean addAll(Collection c) - добавляет элементы из коллекции c в текущую, используя метод add().

public void clear() - очищает коллекцию, присваивая всем элементам значение null.

public boolean retainAll(Collection c) - удаляет из коллекции элементы, которых нет в коллекции c.

public boolean removeAll(Collection c) - удаляет из коллекции элементы из коллекции с.

public boolean containsAll(Collection c) - возвращает истину, если в текущей коллекции есть все элементы коллекции с.

public boolean offer(Object o) - добавляет элемент в коллекцию.

public Object remove() - удаляет и возвращает последний элемент в коллекции. Уменьшает счетчик заполненных элементов.

public Object poll() - удаляет и возвращает последний элемент в коллекции.

public Object element() - возвращает первый элемент из коллекции.

public Object peek() - возвращает первый элемент из коллекции.

private void checkSize() - проверяет, если количество внесенных элементов равно размеру коллекции, то смещает коллекцию
влево, затем уменьшает счетчик заполненных элементов не 1.

public String toString() - переопределяет метод toString().

private class MyIterator implements Iterator - внутренний класс MyIterator, который имплементирует интерфейс Iterator.
Имеет два метода: hasNext() проверяет равен ли передаваемый индекс счетчику заполненных элементов, next() возвращает
из коллекции элемент, следующий за заданным индексом.
